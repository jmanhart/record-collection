---
import "../styles/global.scss";

const { 
  type = "button",
  variant = "primary",
  size = "medium",
  disabled = false,
  class: className = "",
  iconPosition = "left",
  children,
  onclick
} = Astro.props;
---

<button 
  type={type}
  disabled={disabled}
  class={`btn btn-${variant} btn-${size} ${className} btn-with-icon`}
  onclick={onclick}
>
  <slot name="icon-left" slot="icon-left" />
  <span class="btn-content">
    <slot />
  </span>
  <slot name="icon-right" slot="icon-right" />
</button>

<style>
  .btn {
    display: inline-flex !important;
    align-items: center;
    justify-content: center;
    border: none;
    border-radius: 4px;
    font-family: inherit;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    box-sizing: border-box;
    line-height: 1;
    min-width: fit-content;
    height: auto !important;
    width: auto !important;
    gap: 0.5rem;
  }

  /* Icon-only buttons should be square-ish */
  .btn.icon-only {
    min-width: auto;
    width: auto;
    padding: 0.75rem;
    gap: 0;
  }

  /* Remove gap when button only has an icon (no text content) */
  .btn:has(slot[name="icon-left"]):not(:has(.btn-content > *:not(slot))) {
    gap: 0;
  }

  .btn-with-icon {
    padding-left: 1rem;
    padding-right: 1rem;
  }

  /* Adjust padding for icon-only buttons */
  .btn-with-icon:has(slot[name="icon-left"]):not(:has(.btn-content > *:not(slot))) {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }

  .btn-with-icon slot[name="icon-left"] {
    margin-right: 0.5rem;
  }

  .btn-with-icon slot[name="icon-right"] {
    margin-left: 0.5rem;
  }

  .btn-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Ensure icon-only buttons are properly sized */
  .btn:has(slot[name="icon-left"]):not(:has(.btn-content > *:not(slot))) {
    min-width: auto;
    width: auto;
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Primary variant */
  .btn-primary {
    background-color: var(--surface300);
    color: var(--text-primary);
    font-weight: 600;
  }

  .btn-primary:hover:not(:disabled) {
    background-color: var(--surface400);
  }

  .btn-primary:active:not(:disabled) {
 
  }

  /* Secondary variant */
  .btn-secondary {
    background-color: transparent;
    color: var(--text-primary);
    border: 2px solid var(--surface300);
  }

  .btn-secondary:hover:not(:disabled) {
    background-color: var(--surface100);
    border-color: var(--divider);
  }

  /* Tertiary variant */
  .btn-tertiary {
    background-color: transparent;
    color: var(--text-secondary);
    border: 2px solid transparent;
  }

  .btn-tertiary:hover:not(:disabled) {
    background-color: var(--surface100);
    color: var(--text-primary);
  }

  /* Size variants */
  .btn-small {
    padding: 0.625rem 1.25rem;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .btn-medium {
    padding: 0.875rem 1.75rem;
    font-size: 1rem;
    font-weight: 600;
  }

  .btn-large {
    padding: 1.125rem 1.5rem;
    font-size: 1.125rem;
    font-weight: 600;
  }

  /* Loading state */
  .btn.loading {
    position: relative;
    color: transparent;
  }

  .btn.loading::after {
    content: "";
    position: absolute;
    width: 1rem;
    height: 1rem;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Focus state */
  .btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
</style>
